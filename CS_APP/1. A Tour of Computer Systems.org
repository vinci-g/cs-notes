#+TITLE:Chapter 1. A Tour of Computer Systems
#+AUTHOR: vinci_g
#+DESCRIPTION: CS:APP Chapter 1
#+OPTIONS: toc:nil

* TABLE OF CONTENTS :toc:
- [[#introduction-code-helloc][Introduction Code /hello.c/]]
- [[#11-information-is-bits--context][1.1 Information is Bits + Context]]
- [[#12-programs-are-translated-by-other-programs-into-different-forms][1.2 Programs Are Translated by Other Programs into Different Forms]]
- [[#13-it-pays-to-understand-how-compilation-systems-work][1.3 It Pays to Understand How Compilation Systems Work]]
- [[#14-processor-read-and-interpret-instructions-stored-in-memory][1.4 Processor Read and Interpret Instructions Stored in Memory]]
  - [[#hardware-organization-of-a-system][Hardware Organization of a System]]
  - [[#running-the-hello-program][Running the ~hello~ Program]]
- [[#caches-matter][Caches Matter]]
- [[#memory-hierarchy][Memory Hierarchy]]
- [[#os-manages-the-hardware][OS Manages the Hardware]]
  - [[#processes][Processes]]
  - [[#threads][Threads]]
  - [[#virtual-memory][Virtual Memory]]
  - [[#files][Files]]
- [[#systems-communicate-with-other-systems-using-networks][Systems Communicate with Other Systems Using Networks]]
- [[#important-themes][Important Themes]]
  - [[#amdahls-law][Amdahl's Law]]
  - [[#concurrency-and-parallelism][Concurrency and Parallelism]]
  - [[#importance-of-abstractions][Importance of Abstractions]]

* Introduction Code /hello.c/
#+begin_src c
  #include <stdio.h>

  int main(void)
  {
    printf("hello, world\n");
    return 0;
  }
#+end_src

* 1.1 Information is Bits + Context

- The ~hello~ program (source file) which a programmer creates is a sequence of bits organized in 8bit chunks called bytes.
- Each character is represented with a unique byte size interger value using the ASCII standard.
- Each character in a source file is represented with unique byte size interger values following the ASCII standard.
- A source file which is consists of exclusively ASCII characters are called *text files* and all other kinds of files are known as *binary files*.
  - *Text files*: only ASCII characters
  - *Binary files*: all other files
- All information in a system is represented by a bunch of bits.

* 1.2 Programs Are Translated by Other Programs into Different Forms

- To run ~hello.c~ (source file) in a system, it must be translated to *machine language* instructions and packaged as a *executable object program*.
- A *compiler driver* (in this case ~GCC~ for ~C~ programs) is used to translate source file to object file and undergoes four phases called the *compilation system*.

#+begin_src bash
  linux> gcc -o hello hello.c
#+end_src

#+begin_quote
~gcc~ is the compiler, -o is an argument/option to *output* the source code, ~hello~ is the name of the executable, and ~hello.c~ is our source file
#+end_quote


- *Preprocessor Phase* modifies the source code according to the directives (begins with ~#~) and outputs text file with ~.i~ suffix.
- *Compilation Phase* translates ~.i~ file to ~.s~ which is a text file that contains *assembly language*.
- *Assembly Phase* packages the assembly program (~.s~) to a form known as *relocatable object program* with ~.o~ suffix which is a binary file.
- *Linking Phase* merges our ~hello.o~ object file and ~printf.o~ object file with the ~printf~ function to create an ~executable~ that we can run on our system.

[[file:../resources/compilation-system.png]]

* 1.3 It Pays to Understand How Compilation Systems Work

- Programmers need to understand how the compilation system work so as to *optimize program performance* by writing more efficient code, *understanding link-time errors* by resolving hard errors related to the linker, and *avoiding security holes* by understanding how data and control information are stored on a program stack.

* 1.4 Processor Read and Interpret Instructions Stored in Memory

- The *shell* is a command-line interpreter that prints a prompt and executes commands typed by the user.

** Hardware Organization of a System

[[file:../resources/hardware-organization.png]]

- *Buses* is a colletion of electrical conduits that runs through a system and is responsible for carrying fixed size chunks of bytes, known as /words/, back and forth between components.
- *I/O Devices* are a systems connection to the external world and is connected to the I/O bus by either a /controller/, which are chips printed on the motherboard, or an /adapter/, which plugs into a motherboard.
- *Main Memory* which consists of a collection of /dynamic random access memory/ (DRAM), temporarily stores the program and data while the processor executes the program.
- *Processor* (CPU) executes/interprets the program stored in memory pointed at by the /program counter/ then updates the /PC/ to point at the next instruction for the processor to run.
_ /*ALU*/ (Arithmetic/Logic Unit) is responsible for computing new data and address values.

** Running the ~hello~ Program

1. We input ~./hello~ in our keyboard that the shell reads to a register and stores it in memory until we hit ~<RET>~ signifying that we have finished executing that command.
2. The shell loads the executable ~hello~ and copies the code and data in ~hello~ from disk to main memory (called /direct memory access/ (DMA) where data travels from the disk to main memory without passing through the processor).
3. Processor executes the instructions in ~hello~ program's ~main~ routine (or function).
4. The instructions to print (~printf~) the bytes in ~hello, world\n~ string from memory to register to display device.

* Caches Matter

- Running the ~hello~ program creates a lot of work by copying instructions from one component to the next which slows down the program.
- *Cache memories* (/caches/) serves as a temporary staging area for information that the processor might need in the future.
- There are different levels to caches (L1, L2, L3, ...) from fastest but with the least storage to slowest but with more storage and are implemented with a hardware technology called /static random access memory/ (SRAM).
- Caching can make a system have a more larger and faster memory by exploiting /locality/, where data and code are in localized regions.
  
  [[file:../resources/cache-memory.png]]

* Memory Hierarchy

[[file:../resources/memory-hierarchy.png]]

- Storage at one level serves as a cache for the lower level.
- From top to bottom, the devices become slower, larger, and less cost per byte.

* OS Manages the Hardware

- When the ~hello~ program was loaded, neither did it access our I/O devices or memory but it relied on the services provided by the OS.

[[file:../resources/os-system.png]]

- All attempts by the application to manipulate the hardware must go through the OS.
- The OS protects the hardware from misuse by runaway applications and provide applications to manipulate complicated hardware devices.
- The OS achieves its purpose via the fundamental abstractions, /processes/, /virtual memory/, and /files/.
- Files are absstractions for I/O devices, virtual memory for main memory and disk, and processes for processor, main memory, and I/O devices.

[[file:../resources/os-abstraction.png]]

** Processes

- A process gives the illusion that a program is the only one running in a system.
- Multiple processes can run concurrently on a system by having a single CPU do /context switching/ (switching between programs).
- When a processor does context switching, the OS saves the /context/ (state) of the current process and /switches/ to another process wherein the OS loads the state of that process.

[[file:../resources/context-switching.png]]

- The transition from one process to another is managed by the OS /kernel/ and it is the portion of the OS that always resides in memory.
- When an application requires the OS to read/write a file: executes a /system call/, transfer control to the kernel, kernel performs instructions, transfer control back to the application.

** Threads

- Threads are multiple executions units with each running in the context of the process and sharing the same code and global data.

** Virtual Memory

- VM gives the illusion that each process has exclusive use of the main memory.
- /Virtual address space/ is the same uniform view of memory for each process.

[[file:../resources/virtual-address-space.png]]

- Virtual address space consists of well defined areas each with a specific purpose:
  - *Program code and data*: Code begins at the same fixed address for all processes followed by data locations, and is initialized from the contents of an executable.
  - *Heap* expands and contracts dynamically at run time as a result of calls to C standard function libraries such as ~malloc~ and ~free~.
  - *Shared Libraries* holds code and data for shared libraries such as C standard library
  - *Stack* is used by the compiler to implement function calles and like the heap, expands and contracts dynamically during the execution of the program.
  - *Kernel Virtual Memory* is the top most region of the address space and is invoked by applications to perform functions defined in the kernel code.

** Files

- File is just a sequence of bytes.
- All I/O is performed by reading and writing files using a small set of system calls known as /Unix I/O/

* Systems Communicate with Other Systems Using Networks

- Modern systems are often linked to other systems by networks.
- A network can be viewed as another I/O device.

[[file:../resources/network-io.png]]

[[file:../resources/communication-over-network.png]]

* Important Themes

Highlighting important concepts that cut across all aspects of computer systems

** Amdahl's Law

- In speeding one part of a system, the effect on the overall system performance depends on both how significant those part was and how much it sped up.

** Concurrency and Parallelism

- /Concurrency/ refers to a system with multiple, simultaneous activities.
- /Parallelism/ refers to the use of concurrency to make a system run faster.
- Parallelism can be exploted at multiple levels of abstraction in a computer system.

- *Thread-Level Concurrency*
  - With threads we can have multiple control flows executing a single process which allows multiple users to interact with a system at the same time or a single user to engage in multiple tasks concurrently.
  - /Hyperthreading/ allows a single CPU to execute multiple flows of control.
  - Multiprocessing, the use of multiple processors on a system, can improve system performance by reducing the need for concurrency for performing multiple tasks and to run single applications faster.

  [[file:../resources/uniprocessor-vs-multiprocessor.png]]

  [[file:../resources/multicore-processor-organization.png]]

- *Instruction-Level Parallelism*
  - Execution of multiple instructions at one time at a much lower level abstraction.
  - /Pipelining/ are actions required to execute an instruction are partitioned into different steps.
  - /Superscalar/ processors are processors that can sustain execution rates faster then 1 instruction per cycle.

- *Single-Instruction, Multiple-Data (SIMD) Parallelism*
  - Single instruction to cause multiple operations to be performed in parallel.
  - Provided mostly to speed up applications that process images, sound, and video data.

** Importance of Abstractions
- Abstractions are one of the most important concepts in computer science where an example would be programmers using an API without having to delve into its inner workings.
- Along with the introduced OS abstractions, we add another one called the /virtual machine/ which provides abstraction of the entire computer.
