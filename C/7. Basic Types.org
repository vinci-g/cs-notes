#+TITLE: Chapter 7. Loops
#+AUTHOR: vinci_g
#+DESCRIPTION: C Programming - A Modern Approach Chapter 7
#+OPTIONS: toc

* Table of Contents :toc:
- [[#integer-types][Integer Types]]
  - [[#signed--unsigned-integers][Signed & Unsigned Integers]]
  - [[#integer-constants][Integer Constants]]
  - [[#integer-overflow][Integer Overflow]]
  - [[#reading-and-writing-integers][Reading and Writing Integers]]
- [[#floating-types][Floating Types]]
  - [[#floating-constants][Floating Constants]]
  - [[#reading-and-writing-floating-point-numbers][Reading and Writing Floating-Point Numbers]]
- [[#character-types][Character Types]]
  - [[#operations-on-characters][Operations on Characters]]
  - [[#arithmetic-types][Arithmetic Types]]
  - [[#escape-sequences][Escape Sequences]]
  - [[#reading-and-writing-characters-using-scanf-and-printf][Reading and Writing Characters using ~scanf~ and ~printf~]]
  - [[#reading-and-writing-characters-using-getchar-and-putchar][Reading and Writing Characters using ~getchar~ and ~putchar~]]
- [[#type-conversion][Type Conversion]]
  - [[#usual-arithmetic-conversions][Usual Arithmetic Conversions]]
  - [[#conversion-during-assignment][Conversion During Assignment]]
  - [[#casting][Casting]]
- [[#type-definitions][Type Definitions]]
  - [[#type-definitions-and-portability][Type Definitions and Portability]]
- [[#the-sizeof-operator][The ~sizeof~ Operator]]
  - [[#usage][Usage]]

* Integer Types

** Signed & Unsigned Integers

The leftmost bit of a *signed* integer is 0 if the integer is positive or 0, and 1 if negative, while an *unsigned* integer have the leftmost bit to considered to be part of the number's magnitude.

Integer values in C are by default to be signed. Unsigned numbers are primarily used for systems programming.

The order of specifiers for data types doesn't matter; ~unsigned short int~ == ~short unsigned int~.

We can also omit the word ~int~. ~long int~ can just be ~long~, etc.

*** Integer Types in C99

C99 added ~long long int~ and ~unsigned long long int~ which is -2^63 to 2^63 - 1 and 0 to 2^64 - 1 respectively. This is to support 64-bit architecture and the need for very large integers.

** Integer Constants

Can be written as decimal, octal (starts with 0), or hexidecimal (starts with 0x) where octal and hex are the most convenient way to write low-level programs.

The compiler will infer the right type and specifier for a given constant but we can also force it to the constant for a specific type.

Add ~L~ for long, ~U~ for unsigned and ~UL~ or ~LU~ for unsigned long.

** Integer Overflow

Overflow happens when we perform arithmetic operations on integers and the result would be too large to represent.

Overflow on /signed/ integers are /undefined/ while defined on /unsigned/ integers.

** Reading and Writing Integers

| Conversion Specification | Read/Written As |
|--------------------------+-----------------|
| %u                       | unsigned int    |
| %o                       | octal           |
| %x                       | hexadecimal     |
| %h<type>                 | short type      |
| %l<type>                 | long type       |
| %ll<type>                | long long type  |


* Floating Types

C provides three floating point types:

| Type        | Description                       | Smallest Positive Value | Largest Value | Precision |
|-------------+-----------------------------------+-------------------------+---------------+-----------|
| float       | single-precision floating point   |           1.17549x10^-38 |  3.40282x10^38 | 6 digits  |
| double      | double-precision floating point   |          2.22507x10^-308 | 1.79769x10^308 | 15 digits |
| long double | extended-precision floating point |                         |               |           |

In *C99*, floating types are divided into two categories, the types discussed above are *real floating types* and *complex types*.

** Floating Constants

Floating constants must contain a decimal point and/or an exponent (preceded by the letter "e").

Floating constants are by default set to a ~double~ type which is not a problem as ~doubles~ are converted to ~float~ when necessary.

** Reading and Writing Floating-Point Numbers

| %f | fixed-point notation              |
| %e | exponential notation              |
| %g | either fixed point or exponential |

~%l<type>~ for double, ~%L<type>~ for long double.

* Character Types

~char~ is used for character types and can be assigned to any single character.

#+begin_src C
  char ch;

  ch = 'a';
  ch = 'A';
  ch = '0';
  ch = ' ';
#+end_src

Notice that character constants are enclosed in single quotes, which identifies it as a single character, for example ~'a'~. Using double quotes identifies it as a string literal which contains the character and a null character (making it a 2 char array).

** Operations on Characters

Characters are in a way, similar to integers wherein we can also do the arithmetic operations that we use for integers on characters. This is because each character has an ASCII value and it uses that to perform arithmetic operations on characters.

#+begin_src C
  char ch;

  ch = 65; /* evaluates to 'A' */
  ch += 1 /* evaluates to 'B' */
#+end_src

** Arithmetic Types

Collection of integer and floating types.

- Integral Types
  - char
  - Signed integer types
  - Unsigned integer types both standard and extended
  - Enumerated Types
- Floating types
  - Real floating types
  - Complex types

** Escape Sequences

There are two types of escape sequences: *character* and *numeric escapes*.

| Name            | Escape Sequence |
| Alert (bell)    | \a              |
| Backspace       | \b              |
| Form feed       | \f              |
| New line        | \n              |
| Carriage return | \r              |
| Horizontal tab  | \t              |
| Vertical tab    | \v              |
| Backslash       | \\              |
| Question mark   | \?              |
| Single quote    | \'              |
| Double quote    | \"              |

/Character escapes/ does not include all nonprinting ASCII characters, which brings us to /numeric escapes/ that can represent /any/ character.

/Numeric escapes/ are written in octal (doesn't have to begin with 0) or hexadecimal value (must begin with \x (small x)) and are enclosed in single quotes.

** Reading and Writing Characters using ~scanf~ and ~printf~

The ~%c~ conversion specification is used to read and write single characters. Take note that ~scanf~ doesn't skip whitespace characters so doing ~scanf("%c", &ch)~ will include the preceding whitespace character.

** Reading and Writing Characters using ~getchar~ and ~putchar~

~putchar~ writes a single character while ~getchar~ reads one character and returns it.

Using ~putchar~ and ~getchar~ rather than ~printf~ and ~scanf~ saves more time as it is more faster.

*** Warning

Be careful when mixing up ~scanf~ and ~getchar~ as ~scanf~ leaves behind characters that it has peeked at.

Considering the code:
#+begin_src c
  printf("Enter an integer: ");
  scanf("%d", &i);
  printf("Enter a command: ");
  command = getchar();
#+end_src

~scanf~ will leave behind characters that weren't consumed and ~getchar~ will fetch the first leftover character.

* Type Conversion

C allows arithmetic operations on different basic types and can handle it automatically which is called /implicit conversions/, or can involve a programmer using a /cast operator/ called /explicit conversions/.

Implicit conversions are performed in the following situations:
- Operands in an arithmetic or logical expression don't have the same type. (*Usual arithmetic conversion*)
- Type of expression on the right side of an assignment does not match the variable type.
- Argument type in a function call doesn't match the parameter type.
- Return type doesn't match the function type.

** Usual Arithmetic Conversions

The strategy behind the usual arithmetic conversion is to convert the narrower operand (the operand that requires fewer bytes to store) to the type of the other operand, known as *promotion*.

The most common promotion are *integral promotions* which convert a ~char~ or ~short int~ to ~int~.

Two cases on performing usual arithmetic conversions:
1. The type of either operand is a floating type. /float \rArr double \rArr long double/
2. Neither operand type is a floating type. /int \rArr unsigned int \rArr long int \rArr unsigned long int/

** Conversion During Assignment

The right side of the expression is converted to the type of the variable on the left side if the variable's type is atleast as wide as the expression's.

** Casting

Casting allows us to specify and control type conversions.

#+begin_src C
  (type name) expression
#+end_src

Take note that after casting, if the two operands don't have the same type then usual arithmetic conversion is performed before the operation.

Casting is also necessary to avoid overflow. For example, multiplying two large ~ints~ that would resort to a ~long~ would first result in an ~int~ causing overflow even if the variable to store it into is type long. So casting it to ~long~ would avoid causing an overflow.

* Type Definitions

Besides using ~#define~ to create a macro specifying a type, a better way is to use ~typedef~.

#+begin_src C
  #define BOOL int

  typedef int Bool
  // capitalizing the first letter is not required but good practice
#+end_src

Advantages of type definitions are it can make a program more readable and can make it easy to modify.

** Type Definitions and Portability

Type definitions are essential for portability since not all machines are the same and type specification can be different from different machines.

The C library uses ~typedef~ to create names for types that can vary from different C implementations, which usually end with _t.

* The ~sizeof~ Operator

The ~sizeof~ operator (unary) allows a program to determine how much memory is required to store values of particular type.

** Usage

1. Find out the number of elements on an array.
2. Allocate memory dynamically.
