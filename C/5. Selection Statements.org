#+TITLE: Chapter 5. Selection Statements
#+AUTHOR: vinci_g
#+DESCRIPTION: C Programming - A Modern Approach Chapter 5

* Logical Expressions

Relational operators like <, >, <=, and >= produces 0 (false) or 1 (true).

Equality operators, which tests for equality between two values (==(equal to) and !=(not equal to)) and have lower precedence over relational operators

Logical operators !(unary, inverts the value), &&(produces 1 if both values are non zero), and \vert\vert(binary, produces one if either value is non zero)

* The ~if~ Statement

#+begin_src c
  if (n < 0) {
    printf("n is less than 0\n");
   }
   else if (n == 0) {
     printf("n is equal to 0\n");
   }
   else {
     printf("n is greater than 0\n");
   }

  // the code below is the same even without braces
  if (n < 0) 
    printf("n is less than 0\n");

   else if (n == 0) 
     printf("n is equal to 0\n");

   else 
     printf("n is greater than 0\n");
#+end_src

Example Program: [[file:sample-program/broker.c][broker.c]]

When ~if~ statements are nested, we have to watch out for a dangling ~else~.

#+begin_src c
  if (y != 0)
    if (x != 0)
      result = x/y;
    else
      printf("Error: y is equal to 0\n")
#+end_src

The code above suggests through indentation that the ~else~ statement belongs to the inner ~if~ but that is simply not true. C follows a rule that an ~else~ statement belongs to the nearest ~if~ statement, so the code above looks like this

#+begin_src c
  if (y != 0)
    if (x != 0)
      result = x/y;
  else
    printf("Error: y is equal to 0\n")
#+end_src

To make our conditional statements more cleaner, it is advised to use curly braces.

#+begin_src c
  if (y != 0) {
    if (x != 0)
      result = x/y;    
   }
   else
     printf("Error: y is equal to 0\n")
#+end_src

*** Conditional Expressions
