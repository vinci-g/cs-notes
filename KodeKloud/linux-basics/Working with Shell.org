#+TITLE: Working with Shell
#+AUTHOR: vinci_g
#+OPTIONS: toc

* Table of Contents :toc:
- [[#introduction-to-shell][Introduction to Shell]]
  - [[#command-types][Command Types]]
- [[#basic-linux-commands][Basic Linux Commands]]
  - [[#command-line-help][Command Line Help]]
- [[#bash-shell][Bash Shell]]
- [[#file-compression-and-archival][File Compression and Archival]]
- [[#searching-for-files-and-patterns][Searching for Files and Patterns]]

* Introduction to Shell
When opening the shell, it is usually opened at ~/home/$USER~. ~/home/~ is a system created directory that contains the home directory for almost all the users in the Linux system. It is usually denoted by the ~~~ in the terminal.

Anatomy of a command:

| Command:     | echo    | -n          | Hello    |
|--------------+---------+-------------+----------|
| Description: | Command | Flag/Option | Argument |

** Command Types
1. Internal or Built-in Commands
   - Part of the shell
   - appox. 30 commands like, ~cd, mkdir, pwd, echo, etc.~
2. External Commands
   - Binary programs/scripts that are located at distinct files in the system.
   - Preinstalled or can be installed by the user.

To determine if a command is internal or external, use ~type <command>~.

* Basic Linux Commands
Can refer to [[../devops-prerequisite/Linux%20Basics.md][Linux Basics Notes]].

/Absolute path/ is a path to a location of a file or directory that starts at the root.

/Relative path/ is the path from the present working directory to the location.

~pushd~ command puts the current working directory to a stack. The user can then go to any where on the system.

~popd~ command pops the last pushed directory. If we pushed ~/etc~ and we are at ~/var~, running ~popd~ command will bring us back to ~/etc~.

*Pagers* allow viewing of files: - ~more~ allows viewing of text files in a scrollable manner. It loads the whole file all at once.

- ~<SPC>~ scrolls the display one screenful of data at a time.
- ~<ENTER>~ scrolls the display one line. - ~b~ scrolls the display one screenful /backwards/.
- ~/~ searches text.
- ~q~ to exit
- ~less~ also allows viewing and navigating of files.
- ~<up arrow>~ scrolls up the display one line
- ~<down arrow>~ scrolls down the display one line.
- ~/~ searches the output

~ls~ flags:
- ~-l~ long list
- ~-a~ show hidden files
- ~-lt~ long list files in order created
- ~-ltr~ long list files in the reverse order created

** Command Line Help
- ~whatis <command>~ shows a one line description of what a command does
- ~man <command>~ shows man pages that contain info on the command in detail
- ~--h~ / ~--help~ provide probable use case of a command
- ~apropos <keyword>~ search all the commands in the system and list it depending if the keyword is present in the command.

* Bash Shell
Bash shell features:
- Bash Auto-Completion
- Aliases with ~alias <alias>=<command>~
- Command History with ~history~

*Bash environment* variables store information about the user login session which is used by the shell. To see the current bash environment variables, we use ~env~. We use ~export~ for setting environment variables.

To make environment variables persistent, we add it to our ~~/.profile~ or ~~/.pam_environment~.

*Path variable* is the variable for all the locations of all possible external executable commands. To add to ~PATH~, we use ~export PATH~$PATH:<path_of_command>~.

* File Compression and Archival
We can view a file size of a file multiple ways:
| Command     | Output                                                           |
|-------------+------------------------------------------------------------------|
| du -sk file | Displays file size in kb                                         |
| du -sh file | Displays a prettier output of the file size in Mb                |
| ls -lh file | Shows a list of files and with the ~-h~ flag shows the file size |

~tar~ is a utility command that is used to group multiple files/directories in a single file. Basically for archiving data.

~tar~ stands for /Tape Archive/.

Files created with ~tar~ are typically called /tarballs/

~tar~ command usage:
| Flag                              | Usage                                                                                               |
|-----------------------------------+-----------------------------------------------------------------------------------------------------|
| tar -cf test.tar file1 file2 ...  | The ~-c~ is used to create an archive and the ~-f~ specifies the name of the tar file to be created |
| tar -tf test.tar                  | Used to see the contents of the tarball                                                             |
| tar -xf test.tar                  | Used to extract the contents from the tarball                                                       |
| tar -zcf test.tar file1 file2 ... | The ~-z~ is used to compress the tarball and reduce its size                                        |

There are multiple ways to compress and uncompress a file
| Compress | Uncompress |
|----------+------------|
| bzip2    | bunzip2    |
| gzip     | gunzip     |
| xz       | unxz       |

The space of the compressed file created by these commands depends on the type of file, the compression algorithm used by these commands, and the compression level used.

Take note that a compressed file need not to be uncompressed everytime, there are tools that allow usage of compressed files such as ~zcat, bzcat, and xzcat~ allow the compressed file to be read without uncompressing them.

* Searching for Files and Patterns
