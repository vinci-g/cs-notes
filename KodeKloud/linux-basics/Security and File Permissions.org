#+TITLE: Security and File Permissions
#+AUTHOR: vinci_g
#+OPTIONS: toc
#+OPTIONS: ^:nil

* Table of Contents :toc:
- [[#linux-accounts][Linux Accounts]]
  - [[#account-types][Account Types]]
  - [[#commands][Commands]]
  - [[#sudo][SUDO]]
- [[#access-control-files][Access Control Files]]
- [[#user-management][User Management]]
- [[#linux-file-permissions][Linux File Permissions]]
  - [[#modifying-file-permissions][Modifying File Permissions]]
  - [[#modifying-ownership][Modifying Ownership]]
- [[#ssh-and-scp][SSH and SCP]]
  - [[#ssh][SSH]]
  - [[#scp][SCP]]
- [[#iptables][IPTables]]
- [[#cron-jobs][Cron Jobs]]

* Linux Accounts
Every user in Linux has an associated account and maintains info such as the username and password used to log in the system. Every user also contains a UID which is unique for every user in the system.

Information on a user file is stored in ~/etc/passwd~.

User attributes:

*User*
- username
- UID
- GID (GID is the same as UID if no group is specified for the user)
- Home Directory

#+begin_src shell
  id <user>
#+end_src

This command shows displays the ~UID~, ~username~, ~GID~, and ~groups~ of the user.

#+begin_src shell
  grep -i <user> /etc/passwd
#+end_src

This command displays the home directory path and the default share assigned to the user.

A *Linux group* is a collection of users and is used to organize users based on common attributes such as role or function. Each group like users has a unique identifier called GID.

Information about groups is stored in ~/etc/group~

** Account Types
1. User Account
   - individual people who needs access to Linux
2. Superuser Account
   - root with ~UID~ of 0 and has *unrestricted access and control* over the system
3. System Accounts
   - created during OS installation and for use by software or services that will not run as the super user. ~UID~ is usually < 100 or between 500 - 1000
   - usually don't have a dedicated home directory
   - if there is a dedicated home directory, the home directory is not created under ~/home~
4. Service Accounts
   - similar to system accounts
   - created when services are installed in Linux

** Commands
| Command | Usage                                                                             |
|---------+-----------------------------------------------------------------------------------|
| id      | Display information about a user (UID, GID, groups)                               |
| who     | Display users currently logged into the system                                    |
| last    | Display record of all logged in users and the date & time the system was rebooted |

** SUDO
The default configuration for sudo is defined under ~/etc/sudoers~ file which defines the policies applied by the sudo command.

Only users listed in the ~/etc/sudoers~ file can make use of the sudo command for privilege escalation.

Sample ~sudoers~ file:
#+begin_src
  User privilege specification
  root ALL=(ALL:ALL) ALL
  # Members of the admin group may gain root privileges
  %admin ALL=(ALL) ALL
  # Allow members of the group sudo to execute any command
  %sudo ALL=(ALL:ALL) ALL
  # Allow Bob to run any command
  bob ALL=(ALL:ALL) ALL
  # Allow Sarah to reboot the system
  sarah localhost=/usr/bin/shutdown -r now
  # See sudoers(5) for more information on "#include" directives:
  #includedir /etc/sudoers.d
#+end_src

Syntax:
| Description   | Example                    |
|---------------+----------------------------|
| User or Group | bob, %sudo(group)          |
| Hosts         | localhost, ALL(default)    |
| User          | ALL(default)               |
| Command       | /bin/ls, ALL(unrestricted) |

* Access Control Files
Most of the access control files are stored inside the ~/etc/~ directory and any user can read the contents of it by default. Write access however is only allowed for the root user.

Access control files should not be modified using a text editor but instead use the shell built in commands to add or modify access as needed.

~/etc/passwd~ contains basic user information like username, UID, GID, etc. but does not store passwords.
#+begin_src
  bob:x:1001:1001::/home/bob:/bin/bash

  USERNAME:PASSWORD:UID:GID:GECOS:HOMEDIR:SHELL
#+end_src

~PASSWORD~ is set to ~x~ as it is set inside ~/etc/shadow~.

~GECOS~ is a CSV format or a comma-separated list of user information such as full name, location, phone number, etc. This field is optional while the *other remaining fields are mandatory*.

~/etc/shadow~ contains passwords which are hashed.
#+begin_src
  bob:<password-hash>:18188:0:99999:7:::

  USERNAME:PASSWORD:LASTCHANGE:MINAGE:MAXAGE:WARN:INACTIVE:EXPDATE
#+end_src

~PASSWORD~ contains the encrypted password. An asterisk or empty field implies that the password is not set by the user.

~LASTCHANGE~ and ~EXPDATE~ value is in /epoch/ which is the days after /Jan 1, 1970/.

~/etc/group~ contains information about all user groups in the system such as the group name, GID, and members.

#+begin_src
  developer:x:1001:bob,sara

  NAME:PASSWORD:GID:MEMBERS
#+end_src

* User Management
| Command                        | Function                              |
|--------------------------------+---------------------------------------|
| useradd <user>                 | Create a new local user in the system |
| passwd <user>                  | Set the password for a user           |
| userdel <user>                 | Deletes a user                        |
| groupadd -g <GID> <group_name> | Creates a group with custom GID       |
| groupdel <group_name>          | Delete group                          |

~useradd~ options:
| Flag | Function                                   |
|------+--------------------------------------------|
| -c   | Custom comments                            |
| -d   | Custom home directory                      |
| -e   | Expiry date                                |
| -g   | Specific GID                               |
| -G   | Create user with multiple secondary groups |
| -s   | Specify login shells                       |
| -u   | Specify UID                                |

Example:
#+begin_src shell
  useradd -u 1009 -g 1009 -d /home/robert -s /bin/bash -c "Mercury Project member" bob
#+end_src

* Linux File Permissions
When running ~ls -l~ on a directory, all files in that directory are displayed along with their details. We can also see file permissions on the output of the command. Let's break it down.

#+begin_src
  - r w x r w x r - x ...<other_file_details>
#+end_src

The code block above shows the file permissions of the file.

1. The first 3 characters ~r w x~ after the file identifier (~-~) are the permissions for the owner of the file.
2. The second 3 characters ~r w x~ are the permissions for the group owning the file.
3. The last 3 characters ~r - x~ are the permissions for all other users.

| Bit | Purpose        | Octal Value |
|-----+----------------+-------------|
| r   | Read           |           4 |
| w   | Write          |           2 |
| x   | Execute        |           1 |
| -   | No Permissions |           0 |

Assuming a file permission of ~d--xrwxrwx~, we can see that it is a directory where the owner only has ~execute~ access. The owner cannot read or write to the directory but can ~cd~ into it. If the owner is part of the group that owns the directory, then why can't he ~read~ or ~write~ to the directory?

This is because in Linux, the system identifies the user and checks permissions *sequentially*. Meaning that if the system detects that the owner of the file is accessing the file, permissions on groups and other users are ignored.

Octal value for permissions:
- ~rwx~ = 7
- ~rw-~ = 6
- ~r-x~ = 5
- ~-wx~ = 3

** Modifying File Permissions
#+begin_src shell
  chmod <permissions> file
#+end_src

There are two ways to modify permissions, symbolic mode and numeric mode.

-----

In symbolic mode:

| u | Owner  |
| g | Group  |
| o | Others |

Providing full access to the owner:
#+begin_src shell
  chmod u+rwx test-file
#+end_src

Provide read access to the owner, group, and others, remove execute access
#+begin_src shell
  chmod ugo+r-x test-file
#+end_src

Remove all access for others:
#+begin_src shell
  chmod o-rwx test-file
#+end_src

Full access for owner, add read, remove execute for group, and no access for others:
#+begin_src shell
  chmod u+rwx, g+r-x, o-rwx test-file
#+end_src

-----

In numeric mode:

We rely on the octal value of each bit.

Provides full access to Owners, group and others:
#+begin_src shell
  chmod 777 test-file
#+end_src

Provides read and execute permissions to owners, group, and others:
#+begin_src shell
  chmod 555 test-file
#+end_src

** Modifying Ownership
#+begin_src shell
  chown owner:group file
#+end_src

If group is not provided then only the ownership is changed.

We can also just change the group for a file using:

#+begin_src shell
  chgrp group file
#+end_src

* SSH and SCP

** SSH
#+begin_src shell
  ssh <hostname OR IP Address>

  ssh <user>@<hostname OR IP Address>

  ssh -l <user> <hostname OR IP Address>
#+end_src

Take note that before running SSH, the remote server must have SSH running, and a valid username and password created on the remote system or an SSH key to be used to login to the remote server.

The network connection must also be open for port 22 from the client to the server.

To generate an SSH key pair:
#+begin_src shell
  ssh-keygen -t rsa
#+end_src

Public key: ~/home/<user>/.ssh/id_rsa.pub~
Private key: ~/home/<user>/.ssh/id_rsa~

After creating a key pair, we need to copy the public key to the remote server using
#+begin_src shell
  ssh-copy-id <user>@<hostname OR IP Address>
#+end_src

Copying the public key stores it in ~/home/<user>/.ssh/authorized_keys~ in the remote server.

** SCP
~SCP~ allows the user to copy data over SSH

#+begin_src shell
  scp <file or directory on local> <hostname:<path to copy the file into>>
#+end_src

To copy directories instead of files then use the ~-r~ flag with ~scp~. And to preserve the ownership and permission of the source file, we use the ~-p~ flag.

* IPTables
Using IPTables can set connectivity rules over a network in a Linux based system.

~iptables -L~: Lists the default rules configured in the system.

The output would show three types of rules/chains configured by default:

1. Input
   - Applicable to network traffic coming into the system.
2. Forward
   - Used in network routers where the data is forwarded to other networks
3. Output
   - Responsible for connections initiated by this server to other systems

Each chain can have multiple rules in it. Each rule performs a check and /accepts/ or /drops/ the packet based on the condition.

We can configure the condition to consider the destination where the traffic is headed to, the port at which the traffic is coming to, as well as the protocol.

Adding an input rule on the remote server to allow SSH connection from the client laptop:
#+begin_src shell
  iptables -A INPUT -p tcp -s <client_IP> --dport 22 -j ACCEPT
#+end_src

| Option  | Description                            |
|---------+----------------------------------------|
| -A      | Add/Append rule                        |
| -p      | Protocol                               |
| -s      | Source                                 |
| --dport | Destination port                       |
| -j      | Action to take                         |
| -I      | Inserts a rule to the top of the chain |
| -d      | Destination                            |
| -D      | Delete a rule                          |

By default, the INPUT policy accepts all INPUT connections.

To allow only a specific client to be able to SSH to a remote server:
#+begin_src shell
  iptables -A INPUT -p tcp --dport -j DROP
#+end_src

Take note that IPTable rules are implemented from top to bottom. So in a case that multiple rules matching a source/destination in a port, the rule the appear first in the list is applied. Other rules below are ignored.

To delete a rule:
#+begin_src shell
  iptables -D OUTPUT <rule_number_in_the_list>
#+end_src

Take note that the /ephemeral port range/ is from ~32768 - 60999~.

* Cron Jobs

With a cron job, a user can specify any date, time, or frequency to schedule a task and is enabled by the ~crond service~ that runs in the background.

To schedule a job, run the following command on the user you want to run this task:
#+begin_src shell
  crontab -e
#+end_src

This will open the crontab in the vi editor. Edit the file and write at the bottom of the file the job we want to run at the given date/time.

The first 5 fields specify when we want to run the job. The next field is the command we want to run.

Take note that we shouldn't use the ~sudo~ command with the ~crontab~ command since the job will be scheduled for the root user.

Assuming we want to run a job at *8:10am February 19 Monday*, the first 5 fields should look like this:
#+begin_src
  10 8 19 2 1 <command>
#+end_src

If the field is a ~*~ then it indicates /any value/. For example if we want to run the command at *8:10am everyday every month every Tuesday*:
#+begin_src
  10 8 * * 2 <command>>
#+end_src

~*/#~ means that it is a step value. Assuming we want to run the command every 2 minutes:
#+begin_src
  */2 * * * * <command>
#+end_src

To list all the jobs scheduled in cron:
#+begin_src shell
  crontab -l
#+end_src

Another method to check is to run:
#+begin_src shell
  tail /var/log/syslog
#+end_src

This command shows the logs of the commands the system has run.
