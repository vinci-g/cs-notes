#+TITLE: Docker Commands
#+AUTHOR: vinci
#+OPTIONS: toc

* Table of Contents :toc:
- [[#basic-docker-commands][Basic Docker Commands]]
- [[#docker-run][Docker Run]]
  - [[#tags][Tags]]
  - [[#stdin][stdin]]
  - [[#port-mapping][Port Mapping]]
  - [[#volume-mapping][Volume Mapping]]
- [[#docker-inspect][Docker Inspect]]
- [[#container-logs][Container Logs]]

* Basic Docker Commands

| Command                                   | Usage                                                                                   |
|-------------------------------------------+-----------------------------------------------------------------------------------------|
| docker run <image>                        | Run an instance of the image on the host if it exists, or pull an image from docker hub |
| docker ps                                 | List all running containers. ~-a~ flag lists all containers both running and not        |
| docker stop <container_id/container_name> | Stops a running container                                                               |
| docker rm <container_id/container_name>   | Remove a stopped or exited container permanently                                        |
| docker images                             | List all available images                                                               |
| docker rmi <image>                        | Remove an image                                                                         |
| docker pull <image>                       | Pull an image from docker hub but does not run it                                       |

Appending a command (example using Ubuntu image):
#+begin_src shell
  docker run ubuntu sleep 5
#+end_src

The code above executes a command when we run a container.

Executing a command on a *running container*:
#+begin_src shell
  docker exec <container_name/container_id> <command>

  docker exec distracted_mcclintock cat /etc/hosts
#+end_src

* Docker Run

** Tags
Using a colon (~:~) with the image when executing ~docker run~ adds a tag and it can specify the version of the image. Not specifying a tag will default to /latest/.

Example use case:
#+begin_src shell
  docker run redis:4.014
#+end_src

** stdin
Docker run can also accept ~stdin~ but by default, it does not.

Assuming we dockerized an application that displays a prompt and accepts a ~stdin~. When we run the container as is, it would only show the output. This is because it runs in non-interactive mode. For the container to accept ~stdin~, we need to be able to run it in /interactive mode/ using the ~-i~ flag.

We also need to add a ~-t~ flag to show the prompt, which stands for /sudo terminal/.

Example use case:
#+begin_src shell
  docker run -it kodekloud/simple-prompt-docker
#+end_src

** Port Mapping
*Port mapping* is basically mapping the port from a container to a free port on the host so that users can use the application.

Usage:
#+begin_src shell
  docker run -p 80:5000 kodekloud/webapp
#+end_src

Where ~80~ is the port of the host and ~5000~ is the port on the container.

** Volume Mapping
If data is stored in a container and we destroy the container, all of that data will be lost.

In order to persist data, we need to map a directory outside the container on docker host, to a directory outside the container.

Usage:
#+begin_src shell
  docker run -v /opt/datadir:/var/lib/mysql mysql
#+end_src

Where ~/opt/datadir~ is the directory on the host and ~/var/lib/mysql~ is the directory on the container.

* Docker Inspect
~docker inspect <container_name/id>~ displays additional details on a container. It shows more details that ~docker ps~.

* Container Logs
~docker logs <container_name/id>~ shows the logs of a container we run in the background.
