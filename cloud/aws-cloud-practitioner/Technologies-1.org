#+TITLE: Technologies - Part 1
#+AUTHOR: vinci
#+OPTIONS: toc

* Table of Contents :toc:
- [[#aws-global-infrastructure][AWS Global Infrastructure]]
  - [[#regions][Regions]]
  - [[#availability-zones][Availability Zones]]
  - [[#global-content-delivery--edge-locations][Global Content Delivery & Edge Locations]]
  - [[#local-zones][Local Zones]]
  - [[#edge-locations-vs-local-zones][Edge Locations vs Local Zones]]
- [[#networking][Networking]]
  - [[#vpc][VPC]]
  - [[#subnets][Subnets]]
  - [[#nat-gateway][NAT Gateway]]
  - [[#firewall][Firewall]]
- [[#storage][Storage]]
  - [[#block-storage][Block Storage]]
  - [[#file-storage][File Storage]]
  - [[#object-storage][Object Storage]]
- [[#compute][Compute]]
  - [[#ec2][EC2]]
  - [[#lambda][Lambda]]
  - [[#containers][Containers]]

* AWS Global Infrastructure

** Regions
An AWS Region is a geographic location where resources can be deployed.

Each region is designed to be isolated from other regions across the globe which gives the following benefits:
- Fault Tolerance
- Stability

Factors that we need to consider when selecting a region:
1. Not all regions are the same
2. Not all services are available on all regions
3. GovCloud regions designed for U.S. Government and customers who need to meet regulartory and compliance requirements
4. Select a region as close as possible to customers to minimize latency
5. Cost of services vary from region to region
6. Due to compliance and legal requirements, you may need to run your infrastructure in certain areas/countries

** Availability Zones
Within a region, there are *multiple* availability zones.

An Availability Zone (AZ) is one or more discrete data center with redundant power, networking, and connectivity in an AWS region. Basically they provide redundancy within a region.

** Global Content Delivery & Edge Locations
Edge locations are essentialy CDNs where customers from a different region can send a request to, an example a web server hosted in another region, through the customers local edge location, minimizing latency.

** Local Zones
Local zones are extensions of AWS regions that allows the user to select AWS services like compute or storage closer to the end-users.

Local zones provide high-bandwidth, secure connection to the parent AWS region.

Great for low-latency applications like real-time gaming, live streaming, and virtual workstations for the local city.

** Edge Locations vs Local Zones
Local Zones
- Extensions of regions physically located in major cities across the world
- Have their own isolated infrastructure but connected to the parent AWS region
- Provide access to subset of services like EC2 & EBS

Edge Locations
- Geographically dispersed compute sites
- Support services such as CloudFront (content delivery network), Route53, AWS WAF
- Limited to mostly CDN services
- Hundreds of Edge Locations as they are not full sized

* Networking
By default, deploying an application to AWS will give us our own mini private cloud which are isolated therefore other customers won't be able to communicate with our application.

These private clouds are called VPCs (Virtual Private Cloud).

** VPC
A VPC is a secure isolated network hosted within AWS.

VPC isolates computing resources from other computing resources available in the cloud.

Allows customers full control over the networking in the cloud:
- Subnetting (IP address)
- Routing (Route tables)
- Firewalls
- Gateways

We can not only have one but multiple VPCs where can segment out different VPCs for different environments, different applications, etc. It is up to the customer to architect/design on how to use multiple VPCs.

A VPC is specific to a single region and acts as a network boundary.

With a hybrid deployment model, we can connect physical data centers to a VPC using a VPN.

Every VPC has a range of IP addresses assigned to it called the /CIDR block/ that defines the IP addresses the resources in that VPC can use.

*** Default VPCs
There are two type of VPCs
1. Default
   - /16 IPV4 CIDR block 172.31.0.0/16 (65,536 addresses)
   - /20 default subnet in each Availability Zone (4,096 addresses)
   - Internet gateway already attached to the VPC
   - A route that points all traffic (0.0.0.0/0) to the internet gateway
   - Default security group and network access control list
2. Custom

Every account has a default VPC in each region and have configurations defined by AWS.

Custom VPCs allow the user to create/modify configurations associated with the VPC.

** Subnets
Subnets are a group of IP addresses in your VPC and resides in a within a single availability zone.

They can be made both public or private to allow external access to resources within them.

Subnets within a VPC must be within a CIDR range.

The first 4 IP addresses of a subnet are reserved and cannot be used.
- 192.168.10.0 - network address
- 192.168.10.1 - 192.168.10.3 - reserved for AWS

The last address of a subnet, 192.168.10.255 is reserved as a broadcast address.

*Internet Gateway* allows subnets in a VPC to communicate with the Internet and vice versa, and determines whether a subnet is public or private.

** NAT Gateway
NAT Gateways are different from internet gateways as connections must always be initiated from the private subnet to get a response. Internet gateways on the other hand allow either side to initiate a connection.

Deployed in a public subnet that acts as a medium/middleman for the private subnet and the internet gateway.

** Firewall

*** Stateless Firewall
Firewalls monitor traffic and only allow traffic permitted by a set of predetermined rules, and are broken down into inbound and outbound rules.

Stateless firewalls must be configured to allow both inbound and outbound traffic.

*** Stateful Firewall
Intelligent to understand which request and response are a part of the same connection.

If the request is permitted then the response automatically permitted as well.

*** Network Access Control List (NACL)
Filter traffic entering and leaving a subnet but not within a subnet.

Stateless firewalls so rules must be set for inbound and outbound connections.

*** Security Group
Act as firewalls for individual resources (EC2, RDS, LB).

Stateful firewalls so only the requests needs to be allowed.

* Storage
There are different types of storages namely:
1. Block storage
2. File storage
3. Object storage

** Block Storage
Block storage breaks up data into blocks and then stores those blocks as separate pieces each with a unique identifier.

A collection of blocks can be presented to the OS as a volume where the OS creates a filesystem on top of it.

A block collection can also be presented as a hard drive where we can install an OS on it and make it bootable.

The only type of storage that is bootable.

*** Amazon Elastic Block Storage (EBS)
EBS are associated with a specific availability zone therefore we cannot have an EC2 instance connected to a block storage in a separate availability zone.

** File Storage
*Amazon Elastic File System* (EFS)

Stores data in a hierarchical structure of files and folders.

Filesystem that is accessible remotely and can be mounted. Functionality is the same as any other filesystem like in our machine.

Multiple clients can access the same data.

** Object Storage
*S3*

Stores objects (which in essence are nothing more than files) which is any type of file.

Does not a folder structure therefore cannot be mounted or booted. It can only be used to retrieve files.

Great for storing logs and media files.

There are different storage classes in S3 that provide varying level of:
- Data Access
- Resiliency
- Cost

*** S3 Standard (Default)
- Can handle two simultaneous AZ failures
- 99.999999999% durability
- Cost: Gb/month + Gb of data outbound
- Most expensive storage class
- Data is readily available

*** S3 Standard-IA (Infrequent Access)
- Can handle two simultaneous AZ failures
- 99.999999999% durability
- Cheaper than S3 Standard
- Has a retrieval fee
- Minimum duration charge of 90 days
- Minimum size charge of 128kb per object

*** S3 One Zone-IA
- Data is stored in only one availability zone
- Not required to handle AZ failure
- But basically almost the same as S3 Standard-IA

*** S3 Glacier-Instant
- Low cost option for rarely accessed data
- Performance same as that of S3 Standard
- Cheaper than S3 Standard and S3 Standard-IA
- Higher retrieval cost

*** S3 Glacier Flexible
- Data isn't immediately available
- Cheaper than all the storage classes mentioned above
- Minimum size charge of 40kb per object
- During retrieval, objects are stored in S3 Standard-IA class temporarily

*** S3 Glacier Deep Archive
- Cheapest storage class in S3
- Minimum size charge of 40kb per object
- Long retrieval of objects (hours)

*** S3 Intelligent-Tiering
- Automatically reduces storage cost by intelligently moving data to the most cost effective access tier
- All objects will incur a monitoring/automation cost per 1000 objects on top of the cost of the storage class

* Compute
The service responsible for providing servers in the cloud is EC2.

** EC2
Service that provides secure, resizable, compute capacity in the cloud.

Allows us to provision a server within AWS in minutes.

Multiple EC2 instances can be deployed on a single server using virtual machines.

VPCs are used to logically isolate each customer's infrastructure.

*** Amazon Machine Image (AMI)
AMI is an image that provides the information required to launch an EC2 instance.

It is a blueprint that contains information such as what OS and software/packages should be installed in an instance to be used to deploy identital EC2 instances.

AMIs can be customized to add application source code, add dependencies, and customize OS firewall.

*** Instance Types
Instance types are basically EC2 specs that have varying combinations of CPU, memory, storage, and networking capacity.

*General Purpose*
 - Good balance of compute, memory, and networking resources
 - Used for diverse workloads
 - Ideal for apps that use resources in equal proportions

*Compute Optimized*
 - For compute-heavy applications
 - High performance CPUs
 - For batch processing, media transcoding, ML, and gaming servers

*Memory Optimized*
- Fast performance for memory-intensive workloads
- Suited for databases

*Storage Optimized*
- For workloads that require high sequential read & write access to large data sets on local storage
- Can deliver tens of thousands of low latency, random I/O operations per second (IOPS)

*Accelerated Computing*
- Utilize hardware accelerators to perform expensive calculations
- Great for graphics processing and data pattern matching

*** EC2 Pricing Options
1. On-demand pricing
   - Pay for compute capacity by the hour
   - Only billed when the instance is running
     - Still charged for storage attached to instance
   - No upfront payment or long-term commitment
   - Great for short-term, irregular, or unpredictable workloads
   - Customer EC2 instances run on shared hosts
2. Spot pricing
   - Offers spare compute capacity at discounted rates
   - Recommended for:
     - Apps that have flexible start and end time
     - Low compute prices
   - Not suited for workloads that cannot tolerate interruptions
3. Reserve Pricing
   - Reserve an instance and get a discounted price
   - Offers discounted rates when reserved for a certain period (1 year or 3 year contract)
   - Basically commiting to using an on-demand instance for a long term period for a lower (reserved) price

** Lambda
AWS Lambda is a compute service that lets you run code without having to provision or manage servers.

Lambda is AWS' /serverless/ offering wherein AWS manages the server maintenance, scaling, capacity provisioning, and logging.

Has three main components:
1. Lambda Function
   - A regular function
2. Trigger
   - Determines when the lambda function runs
   - Should be an event that takes place within AWS
3. Event
   - Information about what trigger took place

*** Use Cases
- File Processing
- Stream Processing
- Web Application
- Mobile/Web Backend

*** Benefits of Lambda
- No servers to manage
  - No need for an infra team
  - No patching/upgrading
  - Faster development
- Auto scale to handle traffic spikes
- Pay for what you use
  - Pay per invocation
  - No extra cost for low traffic

*** Downsides for Lambda
- No local state
  - Needs separate database to store data that needs to persist
- Limited execution duration
  - Functions can run at most 15 minutes
  - Not good for long running task
- Cold starts that occur due to the time it takes to initialize and load the function
  - /SnapStart/ and provisioned concurrency helps mitigate cold starts

*** Pricing
- Number of times a function ran
- How long did it run for
- How much memory/CPU did it require

** Containers
Containers are a tool to package an application that contains all the necessary files, libraries, and dependencies needed for the application to run.

Basically small and lightweight versions of virtual machines.

Container orchestrators on another hand are the brains of containerized environments and are responsible for:
- Deploying containers acroll all available servers
- Load balancing requests to containers
- Provide container to container connectivity
- Restarting failed containers
- Moving containers when hosts fail

*** Elastic Container Service (ECS)
Fully managed container orchestrator service that helps manage, and scale containerized applications.

The containers managed by ECS run on EC2 instances or Fargate.

*** Elastic Kubernetes Service (EKS)
Users are responsible for managing both the control-plane and worker nodes.

EKS is a managed Kubernetes service meaning:
- EKS manages the control-plane for you
- User still manages the worker nodes
  - Using Fargate allows AWS to manage the worker nodes

EKS runs and scales control-planes across multiple AZ and scale control-plane instances based on load.

*** ECS vs EKS
ECS is *proprietary* so moving to another cloud provider can be difficult while EKS is Kubernetes and can be run on any platform.

ECS has a simpler architecture while with EKS you have to learn Kubernetes as well as EKS specific features.

ECS has no pricing for the control plane, only pay for the infrastructure running applications while EKS is more expensive because we need to pay for the worker nodes and the control plane.
