#+TITLE: Application Basics
#+AUTHOR: vinci_g
#+OPTIONS: toc

* Table of Contents :toc:
- [[#java][Java]]
  - [[#java-installation][Java Installation]]
  - [[#java-development-kit-jdk][Java Development Kit (JDK)]]
  - [[#building-and-packaging][Building and Packaging]]
  - [[#build-tools][Build Tools]]
- [[#nodejs][NodeJS]]
  - [[#installation][Installation]]
  - [[#npm][NPM]]
- [[#python][Python]]
  - [[#pip][Pip]]
  - [[#other-package-managers][Other Package Managers]]

* Java
** Java Installation
1. [[https://www.oracle.com/java/technologies/downloads/][Download Java]]
2. [[https://docs.oracle.com/en/java/javase/21/install/overview-jdk-installation.html][Follow the installation instructions for your specific OS]]

** Java Development Kit (JDK)
JDK is a set of tools that helps in developing, running, and building Java applications in a system.

| Develop                        | Build              | Run                                                |
|--------------------------------+--------------------+----------------------------------------------------|
| jdb - debugger                 | javac - compiler   | JRE - Java Runtime Environment                     |
| javadoc - document source code | jar - archive code | java - command line utility to run the application |

All the tools can be seen inside the ~/bin~ directory inside the ~jdk~ directory.

** Building and Packaging
*The build process:*
1. Develop
2. Compile - ~javac MyClass.java~
3. Package - ~jar cf MyClass.jar ...~
4. Document - ~javadoc MyClass.java~

*** Compilation
1. Develop source code.
2. Compile
3. Run

The compiler compiles the Java source code to machine code.

Before a Java source code compiles to machine code, it undergoes a series of steps:

1. The source code goes through the ~javac~ compiler and spits out /Intermediary Byte Code/ which we do manually.
2. The byte code runs inside /Java Virtual Machines/ (JVMs) which allow the application to run anywhere where there is a supported JVM available.

*** Package
/Java Archive/ (JAR) is an archiver that compress and combine multiple ~Java.class~ files and dependent libraries & assets in a single package.

To create an archive:

#+begin_src shell
jar cf MyApp.jar MyClass.class Service1.class Service2.class...
#+end_src

When executed, it creates a manifest file at ~meta-inf/manifest.mf~ that contains info and metadata about the packaged application.

#+begin_src manifest
Manifest-Version: 1.0
Created-By: 1.8.0_242 (Private Build)
Main-Class: MyClass
#+end_src

The ~Main-Class~ specifies the entry point of our application.

When running a ~jar~ file, we use the command ~java -jar MyApp.jar~.

*** Documentation
To create documentation on our code we use ~javadoc~.

#+begin_src shell
javadoc -d doc MyClass.java
#+end_src

~doc~ is the file name of the documentation.

~-d~ is the directory option saying that we are specifying where we will save the doc. In this case, inside current directory with the file name
~doc~.

** Build Tools
Build tools are tools that use configuration files where we can specify the steps we want the build tool to automate.

Some Java build tools:
1. Maven
2. Gradle
3. ANT

* NodeJS
** Installation
Another option to install NodeJS is through NodeSource.

** NPM
/NPM/ - Node Package Manager

~npm search <package>~ - searches for a package

~node -e "console.log(module.paths)"~ - shows all the paths NodeJS looks at for a package

NodeJS has two types of modules, *built-in modules* which are included when you install NodeJS runtime, and *external modules* which we need to install using NPM.

Application dependencies and scripts are located in ~package.json~.

* Python
** Pip
Pip is the Python Package Manager

To install a package, use ~pip install <package_name>~

The directory structure of Python packages consist of directories for 32 bit and 64 bit which is important since it can break an application when used in a machine with a different CPU architecture.

To determine where a package is installed, run ~pip show <package_name>~

*** Requirements
Instead of installing packages one-by-one, we can move all the packages inside ~requirements.txt~ and run ~pip install -r requirements.txt~ to install all the specified packages.

#+begin_example
# reqirements.txt

Flask==0.10.1
Jinja==2.7.3
requests==2.3.0
#+end_example

*** Upgrading/Uninstall a Package
#+begin_src shell
pip install <package_name> --upgrade

pip uninstall <package_name>
#+end_src

** Other Package Managers
1. easy-install: search, find, and install ~.egg~ Python packages
2. wheels: install ~.whl~ packages (must be unpacked first before installing)
