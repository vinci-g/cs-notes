#+TITLE: Chapter 5. Selection Statements
#+AUTHOR: vinci_g
#+DESCRIPTION: C Programming - A Modern Approach Chapter 5
#+OPTIONS: toc

* Table of Contents :toc:
- [[#logical-expressions][Logical Expressions]]
- [[#the-if-statement][The ~if~ Statement]]
- [[#the-switch-statement][The ~switch~ Statement]]

* Logical Expressions

Relational operators like <, >, <=, and >= produces 0 (false) or 1 (true).

Equality operators, which tests for equality between two values (==(equal to) and !=(not equal to)) and have lower precedence over relational operators

Logical operators !(unary, inverts the value), &&(produces 1 if both values are non zero), and \vert\vert(binary, produces one if either value is non zero)

* The ~if~ Statement

#+begin_src c
  if (n < 0) {
    printf("n is less than 0\n");
   }
   else if (n == 0) {
     printf("n is equal to 0\n");
   }
   else {
     printf("n is greater than 0\n");
   }

  // the code below is the same even without braces
  if (n < 0) 
    printf("n is less than 0\n");

   else if (n == 0) 
     printf("n is equal to 0\n");

   else 
     printf("n is greater than 0\n");
#+end_src

Example Program: [[file:sample-program/broker.c][broker.c]]

When ~if~ statements are nested, we have to watch out for a dangling ~else~.

#+begin_src c
  if (y != 0)
    if (x != 0)
      result = x/y;
    else
      printf("Error: y is equal to 0\n")
#+end_src

The code above suggests through indentation that the ~else~ statement belongs to the inner ~if~ but that is simply not true. C follows a rule that an ~else~ statement belongs to the nearest ~if~ statement, so the code above looks like this

#+begin_src c
  if (y != 0)
    if (x != 0)
      result = x/y;
    else
      printf("Error: y is equal to 0\n")
#+end_src

To make our conditional statements more cleaner, it is advised to use curly braces.

#+begin_src c
  if (y != 0) {
    if (x != 0)
      result = x/y;    
   }
   else
     printf("Error: y is equal to 0\n")
#+end_src

*** Conditional Expressions

#+begin_src c
  expr1 ? expr2 : expr3
#+end_src

The conditional operator is just like ternary operators in JavaScript, indicating that /if expr1, then expr2, else expr3/.

Boolean type is not present in *C89* and to work around this, we declare a variable as ~int~ and declare either 0 or 1.

We can also define macros such as ~TRUE~ or ~FALSE~.

#+begin_src c
  #define TRUE 1
  #define FALSE 0

  ...
  int flag;

  flag = 0;
  ...
  flag = 1;

  // in testing if true or false
  if (flag == TRUE)
    ...
    if (flag)

    if (flag == FALSE)
      ...
      if (!flag)
#+end_src

For *C99*, we are introduced the type ~_Bool~ (an unsigned interger type) and can only be assigned 0 or 1. Storing a non-zero variable value will cause the variable to be assigned 1.

#+begin_src c
  _Bool flag;
#+end_src

We can also use a new header ~<stdbool.h>~ which provides ~bool~ macro, ~true~ and ~false~.

#+begin_src c
  #include <stdbool.h>

  ...

  bool flag;
  flag = false;
  flag = true;
#+end_src

* The ~switch~ Statement

The ~switch~ statement is an alternative to ~if~ statments.

#+begin_src c
  if (grade == 4)
    printf("Excellent");
   else if (grade == 3)
     printf("Good");
   else if (grade == 2)
     printf("Average");
   else if (grade == 1)
     prinf("Poor");
   else if (grade == 0)
     printf("Failing");
   else
     printf("Illegal grade");
#+end_src

#+begin_src c
  switch (grade) { // grade must be an integer
    // case constant expression - must not be/contain variable of function calls and must be an integer
   case 4: print("Excellent");
     break;
   case 3: print("Good");
     break;
   case 2: print("Average");
     break;
   case 1: print("Poor");
     break;
   case 0: print("Failing");
     break;
   default: printf("Illegal grade");
     break;
   }
#+end_src

A ~switch~ statement is often faster than ~if~ statements especially for more cases.

The ~break~ statement is used to 'break' out of the ~switch~ statement.

